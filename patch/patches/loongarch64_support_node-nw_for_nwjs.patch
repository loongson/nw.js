diff --git common.gypi common.gypi
index f2df675cf1..3a7daec84f 100644
--- common.gypi
+++ common.gypi
@@ -5,8 +5,8 @@
     'ubsan%': 0,
     'werror': '',                     # Turn off -Werror in V8 build.
     'visibility%': 'hidden',          # V8's visibility setting
-    'target_arch%': 'ia32',           # set v8's target architecture
-    'host_arch%': 'ia32',             # set v8's host architecture
+    'target_arch%': 'loong64',           # set v8's target architecture
+    'host_arch%': 'x64',             # set v8's host architecture
     'want_separate_host_toolset%': 1, # V8 should not build target and host
     'library%': 'static_library',     # allow override to 'shared_library' for DLL/.so builds
     'component%': 'static_library',   # NB. these names match with what V8 expects
@@ -37,6 +37,7 @@
 
     'clang%': 0,
     'error_on_warn%': 'false',
+    'clang_base_dir%': '',
 
     'openssl_product': '<(STATIC_LIB_PREFIX)openssl<(STATIC_LIB_SUFFIX)',
     'openssl_fips': '',
@@ -122,6 +123,9 @@
         'v8_postmortem_support%': 1,
         'clang_dir': '<!(cd <(DEPTH) && pwd -P)/third_party/llvm-build/Release+Asserts',
       }],
+      ['target_arch=="loong64" and building_nw==1', {
+        'clang_dir': '<(clang_base_dir)',
+      }],
       ['GENERATOR == "ninja"', {
         'obj_dir': '<(PRODUCT_DIR)/obj',
         #'v8_base': '<(PRODUCT_DIR)/obj/tools/v8_gypfiles/libv8_snapshot.a',
@@ -142,6 +146,9 @@
       ['OS=="linux" and target_arch=="arm" and <(building_nw)==1', {
         'sysroot': '<!(cd <(DEPTH) && pwd -P)/build/linux/debian_sid_arm-sysroot',
       }],
+      ['OS=="linux" and target_arch=="loong64" and <(building_nw)==1', {
+        'sysroot': '<!(cd <(DEPTH) && pwd -P)/build/linux/debian_bullseye_loong64-sysroot',
+      }],
       ['OS=="mac"', {
         'clang%': 1,
         'obj_dir%': '<(PRODUCT_DIR)/obj.target',
@@ -440,6 +447,8 @@
       'V8_REVERSE_JSARGS',
       '_GLIBCXX_USE_CXX11_ABI=1',
       '_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS',
+      # set LIBCPP_HARDENING_MODE same as chromium settings
+      '_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE',
     ],
 
     # Forcibly disable -Werror.  We support a wide range of compilers, it's
@@ -635,7 +644,7 @@
         'conditions': [
           [ 'building_nw==1 and component=="shared_library"', {
             'defines': [ '_LIBCPP_NO_AUTO_LINK' ],
-            'include_dirs': [ '<(DEPTH)/buildtools/third_party/libc++/trunk/include'],
+            'include_dirs': [ '<(DEPTH)/third_party/libc++/src/include'],
           }],
           [ 'building_nw==1 and component!="shared_library"', {
             'defines': [ '_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS' ],
@@ -694,9 +703,9 @@
             'conditions': [
               [ 'building_nw==1 and OS=="linux"', {
                 'cflags': [ '--sysroot=<(sysroot)', '-nostdinc++', 
-                        '-isystem<(PRODUCT_DIR)/../../buildtools/third_party/libc++/trunk/include', 
+                        '-isystem<(PRODUCT_DIR)/../../third_party/libc++/src/include', 
                         '-isystem<(PRODUCT_DIR)/../../buildtools/third_party/libc++', 
-                        '-isystem<(PRODUCT_DIR)/../../buildtools/third_party/libc++abi/trunk/include' ],
+                        '-isystem<(PRODUCT_DIR)/../../third_party/libc++abi/src/include' ],
                 'ldflags': [ '--sysroot=<(sysroot)','<!(<(DEPTH)/content/nw/tools/sysroot_ld_path.sh <(sysroot))', '-nostdlib++' ],
               }],
               ['clang==1', {
@@ -723,6 +732,10 @@
                 'cflags': [ '-m64', '-march=z196' ],
                 'ldflags': [ '-m64', '-march=z196' ],
               }],
+              [ 'target_arch=="loong64" and OS=="linux"', {
+                'cflags': [ '--target=loongarch64-linux-gnu' ],
+                'ldflags': [ '--target=loongarch64-linux-gnu' ],
+              }],
             ],
           }],
         ],
diff --git config.gypi config.gypi
index 7e0c96db5c..87ee39aeee 100644
--- config.gypi
+++ config.gypi
@@ -6,7 +6,7 @@
                        'libraries': []},
   'variables': { 'clang': 1,
                  'gcc_version': 49,
-                 'host_arch': 'x64',
+                 'host_arch': 'loong64',
                  'icu_small': 'false',
                  'node_install_npm': 'true',
                  'node_prefix': '',
@@ -26,9 +26,9 @@
                  'node_use_mdb': 'false',
                  'node_use_openssl': 'true',
                  'node_use_perfctr': 'false',
-                 'openssl_no_asm': 0,
+                 'openssl_no_asm': 1,
                  'python': '/usr/bin/python',
-                 'target_arch': 'x64',
+                 'target_arch': 'loong64',
                  'uv_library': 'static_library',
                  'uv_parent_path': '/deps/uv/',
                  'uv_use_dtrace': 'false',
diff --git deps/base64/base64/lib/env.h deps/base64/base64/lib/env.h
index d489ba5421..1a02d48cd3 100644
--- deps/base64/base64/lib/env.h
+++ deps/base64/base64/lib/env.h
@@ -45,7 +45,7 @@
 #endif
 
 // Detect word size:
-#if defined (__x86_64__)
+#if defined (__x86_64__) || defined(__loongarch64)
 // This also works for the x32 ABI, which has a 64-bit word size.
 #  define BASE64_WORDSIZE 64
 #elif SIZE_MAX == UINT32_MAX
diff --git node.gyp node.gyp
index 2371d780c1..c832b8b824 100644
--- node.gyp
+++ node.gyp
@@ -1583,7 +1583,7 @@
           'defines': ['NODE_JS2C_USE_STRING_LITERALS'],
 	  'ldflags': [ '-lstdc++' ],
         }],
-        [ 'OS=="linux" and component != "shared_library"', {
+        [ 'OS=="linux" and component != "shared_library" and target_arch == "$host_arch"', {
           'ldflags': [
                       '-Wl,--whole-archive',
                       '<(LIBCXX)',
