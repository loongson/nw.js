diff --git linux_syscall_support.h linux_syscall_support.h
index 99a4b44..00b3a5c 100644
--- linux_syscall_support.h
+++ linux_syscall_support.h
@@ -3940,16 +3940,16 @@ struct kernel_statx {
      * So, we just have to redefine all of the _syscallX() macros.
      */
     #undef LSS_REG
-    #define LSS_REG(ar,a) register int64_t __r##ar __asm__("a"#ar) = (int64_t)a
+    #define LSS_REG(ar,a) register int64_t __r##ar __asm__("$a"#ar) = (int64_t)a
     /* syscall is like subroutine calls, all caller-saved registers may be
      * clobbered, we should add them to the |Clobbers| list.
      * a0 is not included because it's in the output list.
      */
-    #define LSS_SYSCALL_CLOBBERS "t0", "t1", "t2", "t3", "t4", "t5", "t6",    \
-                                 "t7", "t8", "memory"
+    #define LSS_SYSCALL_CLOBBERS "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6",    \
+                                 "$t7", "$t8", "memory"
     #undef  LSS_BODY
     #define LSS_BODY(type,name,args...)                                       \
-          register int64_t __res_a0 __asm__("a0");                            \
+          register int64_t __res_a0 __asm__("$a0");                            \
           int64_t __res;                                                      \
           __asm__ __volatile__ ("li.d $a7, %1\n"                              \
                                 "syscall 0x0\n"                               \
@@ -4013,12 +4013,12 @@ struct kernel_statx {
                                    void *newtls, int *child_tidptr) {
       int64_t __res;
       {
-        register int64_t __res_a0 __asm__("a0");
-        register uint64_t __flags __asm__("a0") = flags;
-        register void *__stack __asm__("a1") = child_stack;
-        register void *__ptid  __asm__("a2") = parent_tidptr;
-        register void *__tls   __asm__("a3") = newtls;
-        register int  *__ctid  __asm__("a4") = child_tidptr;
+        register int64_t __res_a0 __asm__("$a0");
+        register uint64_t __flags __asm__("$a0") = flags;
+        register void *__stack __asm__("$a1") = child_stack;
+        register void *__ptid  __asm__("$a2") = parent_tidptr;
+        register void *__tls   __asm__("$a3") = newtls;
+        register int  *__ctid  __asm__("$a4") = child_tidptr;
         __asm__ __volatile__(/* Push "arg" and "fn" onto the stack that will be
                               * used by the child.
                               */
